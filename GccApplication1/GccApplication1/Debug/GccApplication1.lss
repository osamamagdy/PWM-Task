
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b3  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ac  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIOInit>:
#include <avr/io.h>

void GPIOInit(void)
{
	// Configuring the direction of OC1A & OC1B as output pins
	DDRB |= (1<<OC1A) | (1<<OC1B);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	86 60       	ori	r24, 0x06	; 6
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <main>:
#include "Timer1.h"
int main(void)
{
	// Making it outputs
	
	GPIOInit();
  88:	0e 94 40 00 	call	0x80	; 0x80 <GPIOInit>
	
	// Timer1 
	
	Timer1Init();
  8c:	0e 94 49 00 	call	0x92	; 0x92 <Timer1Init>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x8>

00000092 <Timer1Init>:

void Timer1Init()
{
	//Note: the initial value of registers is logical 0 so if we want to write 1 0 and it is the first use,
    // we will just set the logical 1 only (the logical 0 is set by default).
	TCCR1A |= (1<<WGM11); //Choosing phase correct mode (with adjustable TOP value) by setting WGM13:0 --> 1 0 1 0 
  92:	e0 e8       	ldi	r30, 0x80	; 128
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13); //Note: WGM13 and WGM12 are located in TCCR1B
  9c:	a1 e8       	ldi	r26, 0x81	; 129
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8c 91       	ld	r24, X
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8c 93       	st	X, r24
	When COM1B1:0 ---> 1 0 , it means to clear OC1B on compare match when up-counting,
	and set OC1A on compare match when down counting.
	*/
	/////////This is to make two complementary waves////////////
	
	TCCR1A |= (1<<COM1A1); 
  a6:	80 81       	ld	r24, Z
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1) ; 
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	So, we make the second wave on the OC1B pin uses a duty cycle of 40% ( this is 10% less than the previous one)	
	-----> OCR1B = 0.4*ICR1 = 0.4 * 800 = 320 
	*/
	
	
	TCCR1B |= (1<<CS10); // Setting prescaler to none
  b8:	8c 91       	ld	r24, X
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8c 93       	st	X, r24
	
	ICR1 = 800; // Setting the TOP count to have a periodic time 200 us
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = 400 ;// The duty cycle is 50%
  ca:	80 e9       	ldi	r24, 0x90	; 144
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 320; // The duty cycle is 40%
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
  e2:	08 95       	ret

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>

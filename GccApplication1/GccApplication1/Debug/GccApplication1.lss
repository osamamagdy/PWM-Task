
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b9  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIOInit>:
#include "GPIO.h"
#include <avr/io.h>

void GPIOInit(void)
{
	DDRB |= (1<<OC1A) | (1<<OC1B);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	86 60       	ori	r24, 0x06	; 6
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <main>:
#include "Timer1.h"
int main(void)
{
	// Making it outputs
	
	GPIOInit();
  88:	0e 94 40 00 	call	0x80	; 0x80 <GPIOInit>
	
	// Timer1 
	
	Timer1Init();
  8c:	0e 94 7e 00 	call	0xfc	; 0xfc <Timer1Init>
    /* Replace with your application code */
    while (1) 
    {
		
		
			while((  ( TCNT1>=50 ) & ( TCNT1 <= 60 ) ) || (  ( TCNT1<=50 ) & ( TCNT1 >= 40 ) ) )
  90:	e4 e8       	ldi	r30, 0x84	; 132
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0c c0       	rjmp	.+24     	; 0xb2 <main+0x2a>
			{
				if (TCNT1 >= 50 )
  9a:	20 81       	ld	r18, Z
  9c:	31 81       	ldd	r19, Z+1	; 0x01
  9e:	22 33       	cpi	r18, 0x32	; 50
  a0:	31 05       	cpc	r19, r1
  a2:	08 f0       	brcs	.+2      	; 0xa6 <main+0x1e>
				{
					PORTB &= ~(1<<2);
  a4:	2a 98       	cbi	0x05, 2	; 5
				}
				
				if (TCNT1 <= 50 )
  a6:	20 81       	ld	r18, Z
  a8:	31 81       	ldd	r19, Z+1	; 0x01
  aa:	23 33       	cpi	r18, 0x33	; 51
  ac:	31 05       	cpc	r19, r1
  ae:	08 f4       	brcc	.+2      	; 0xb2 <main+0x2a>
				{
					PORTB |= (1<<2);
  b0:	2a 9a       	sbi	0x05, 2	; 5
    /* Replace with your application code */
    while (1) 
    {
		
		
			while((  ( TCNT1>=50 ) & ( TCNT1 <= 60 ) ) || (  ( TCNT1<=50 ) & ( TCNT1 >= 40 ) ) )
  b2:	20 81       	ld	r18, Z
  b4:	31 81       	ldd	r19, Z+1	; 0x01
  b6:	40 81       	ld	r20, Z
  b8:	51 81       	ldd	r21, Z+1	; 0x01
  ba:	98 2f       	mov	r25, r24
  bc:	22 33       	cpi	r18, 0x32	; 50
  be:	31 05       	cpc	r19, r1
  c0:	08 f4       	brcc	.+2      	; 0xc4 <main+0x3c>
  c2:	96 2f       	mov	r25, r22
  c4:	99 23       	and	r25, r25
  c6:	39 f0       	breq	.+14     	; 0xd6 <main+0x4e>
  c8:	98 2f       	mov	r25, r24
  ca:	4d 33       	cpi	r20, 0x3D	; 61
  cc:	51 05       	cpc	r21, r1
  ce:	08 f0       	brcs	.+2      	; 0xd2 <main+0x4a>
  d0:	96 2f       	mov	r25, r22
  d2:	91 11       	cpse	r25, r1
  d4:	e2 cf       	rjmp	.-60     	; 0x9a <main+0x12>
  d6:	20 81       	ld	r18, Z
  d8:	31 81       	ldd	r19, Z+1	; 0x01
  da:	40 81       	ld	r20, Z
  dc:	51 81       	ldd	r21, Z+1	; 0x01
  de:	98 2f       	mov	r25, r24
  e0:	23 33       	cpi	r18, 0x33	; 51
  e2:	31 05       	cpc	r19, r1
  e4:	08 f0       	brcs	.+2      	; 0xe8 <main+0x60>
  e6:	96 2f       	mov	r25, r22
  e8:	99 23       	and	r25, r25
  ea:	19 f3       	breq	.-58     	; 0xb2 <main+0x2a>
  ec:	98 2f       	mov	r25, r24
  ee:	48 32       	cpi	r20, 0x28	; 40
  f0:	51 05       	cpc	r21, r1
  f2:	08 f4       	brcc	.+2      	; 0xf6 <main+0x6e>
  f4:	96 2f       	mov	r25, r22
  f6:	91 11       	cpse	r25, r1
  f8:	d0 cf       	rjmp	.-96     	; 0x9a <main+0x12>
  fa:	db cf       	rjmp	.-74     	; 0xb2 <main+0x2a>

000000fc <Timer1Init>:
#include "Timer1.h"

void Timer1Init()
{
	// Choosing phase correct mode with ICR1
	TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) ; // Choosing inverter mode for OCR1A and non-inverter mode for OCR1B
  fc:	e0 e8       	ldi	r30, 0x80	; 128
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 6e       	ori	r24, 0xE2	; 226
 104:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<CS10); //And setting prescaler to none
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 61       	ori	r24, 0x11	; 17
 10e:	80 83       	st	Z, r24
	ICR1 = 100; // Setting the TOP count to have a priodic time 200 us
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 118:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A = 50 ;// The duty cycle is 50%
 11c:	82 e3       	ldi	r24, 0x32	; 50
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 124:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 50;
 128:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 12c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
